openapi: 3.0.4
info:
  title: Tech Challenge - Sistema de Gestão de Restaurantes
  description: >
    API RESTful para gerenciamento de usuários de aplicação web. Fornece endpoints para
    criação, atualização e exclusão de usuários (com campos nome, email, login, senha
    e data da última alteração), além de validação de credenciais de login e da busca do usuário pelo id. Desenvolvida
    em Spring Boot e containerizada via Docker Compose, a documentação inclui instruções
    de configuração do ambiente, execução da aplicação e collections de testes em Postman.
  version: 1.0.0
  contact:
    name: Samuel
    email: samuel.lemeleite@gmail.com
servers:
  - url: http://localhost:8080
    description: Servidor local

components:
  securitySchemes:
    BearerAuthentication:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Address:
      type: object
      properties:
        street: { type: string, example: Rua das Flores }
        addressNumber: { type: string, example: "123" }
        complement: { type: string, example: "Apto 45" }
        city: { type: string, example: "São Paulo" }
        state: { type: string, example: "SP" }
        zipCode: { type: string, example: "01234-567" }
        country: { type: string, example: Brasil }
        neighborhood: { type: string, example: Centro }

    User:
      type: object
      properties:
        id: { type: integer, format: int64, example: 1 }
        firstName: { type: string, example: João }
        lastName: { type: string, example: Silva }
        email: { type: string, format: email, example: exemplo@exemplo.com }
        userName: { type: string, example: joao.silva }
        isActive: { type: boolean, example: true }
        createdAt: { type: string, format: date-time, example: "2024-10-01T12:00:00Z" }
        lastModifiedDate: { type: string, format: date-time, example: "2024-10-01T12:00:00Z" }
        profile:
          type: string
          enum: [ADMIN, CUSTOMER, EMPLOYEE]
          example: CUSTOMER
        address:
          $ref: '#/components/schemas/Address'

    CreateUserRequest:
      type: object
      required: [firstName, lastName, email, userName, password]
      properties:
        firstName: { type: string, example: João }
        lastName: { type: string, example: Silva }
        email: { type: string, format: email, example: exemplo@exemplo.com }
        userName: { type: string, example: joao.silva }
        password: { type: string, format: password, example: Senha@123 }
        address:
          $ref: '#/components/schemas/Address'
        profile:
          type: string
          enum: [ADMIN, CUSTOMER, EMPLOYEE]
          example: CUSTOMER

    UpdateUserRequest:
      type: object
      required: [firstName, lastName, email, userName]
      properties:
        firstName: { type: string, example: João }
        lastName: { type: string, example: Silva }
        email: { type: string, format: email, example: exemplo@exemplo.com }
        userName: { type: string, example: joao.silva }
        address:
          $ref: '#/components/schemas/Address'
        profile:
          type: string
          enum: [ADMIN, CUSTOMER, EMPLOYEE]
          example: CUSTOMER

    UpdatePasswordRequest:
      type: object
      required: [oldPassword, newPassword]
      properties:
        oldPassword: { type: string, format: password, example: Senha@123 }
        newPassword: { type: string, format: password, example: NovaSenha@456 }

    UserResponse:
      allOf:
        - $ref: '#/components/schemas/User'

    LoginRequest:
      type: object
      required: [username, password]
      properties:
        username: { type: string, example: joao.silva }
        password: { type: string, format: password, example: Senha@123 }

    ClientCredentialsRequest:
      type: object
      required: [clientId, clientSecret, grantType]
      properties:
        clientId: { type: string, example: tech-challenge-client }
        clientSecret: { type: string, example: tech-challenge-secret }
        grantType: { type: string, example: client_credentials }

    LoginResponse:
      type: object
      properties:
        accessToken: { type: string, example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..." }
        tokenType: { type: string, example: Bearer }
        expiresIn: { type: integer, example: 3600 }
        username: { type: string, example: joao.silva }

    Error:
      type: object
      properties:
        messages:
          type: array
          items:
            type: object
            properties:
              code: { type: string, example: INVALID_REQUEST }
              message: { type: string, example: A requisição contém erros. }

paths:
  /auth/login:
    post:
      tags: [Authentication]
      summary: User Authentication
      description: Endpoint para autenticação de usuários usando username e password
      security: []  # sem autenticação
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login bem-sucedido
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          description: Requisição inválida
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Credenciais inválidas
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/token:
    post:
      tags: [Authentication]
      summary: Client Credentials Authentication
      description: Endpoint para autenticação de aplicações usando Client Credentials flow
      security: []  # sem autenticação
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientCredentialsRequest'
      responses:
        '200':
          description: Token gerado com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          description: Requisição inválida
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Credenciais inválidas
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/:
    post:
      tags: [Users]
      summary: Criar um novo usuário
      security: [{ 'BearerAuthentication': [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '201':
          description: Usuário criado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Requisição inválida
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Conflito (usuário já existe)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/{id}:
    get:
      tags: [Users]
      summary: Buscar usuário por ID
      security: [{ 'BearerAuthentication': [] }]
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer, format: int64 }
      responses:
        '200':
          description: Usuário encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '404':
          description: Usuário não encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags: [Users]
      summary: Atualizar um usuário existente
      security: [{ 'BearerAuthentication': [] }]
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer, format: int64 }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: Usuário atualizado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Requisição inválida
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Usuário não encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Conflito (usuário já existe)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags: [Users]
      summary: Desativar (soft delete) um usuário
      security: [{ 'BearerAuthentication': [] }]
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer, format: int64 }
      responses:
        '204':
          description: Usuário desativado
        '404':
          description: Usuário não encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/{id}/password:
    patch:
      tags: [Users]
      summary: Alterar senha do usuário
      security: [{ 'BearerAuthentication': [] }]
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer, format: int64 }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePasswordRequest'
      responses:
        '200':
          description: Senha alterada com sucesso
        '400':
          description: Requisição inválida
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Não autenticado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Acesso negado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Usuário não encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/{id}/activate:
    patch:
      tags: [Users]
      summary: Ativar usuário
      security: [{ 'BearerAuthentication': [] }]
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer, format: int64 }
      responses:
        '200':
          description: Usuário ativado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '404':
          description: Usuário não encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'